pipeline {
    agent any

    environment {

        REGISTRY = 'quay.io/csye7125advcloud/health-check-operator' 
        BUILD_NUMBER = "${currentBuild.number}"
        registryCredential = 'docker-registry-credentials'
        GOOGLE_CREDENTIAL = "${GOOGLE_CREDENTIALS}"
    }
    stages {
        stage('Checkout'){
            steps {
            //  Clean workspace so the clone is a fresh one
                cleanWs()
                checkout scm
            }
        }
        stage('Building image') {
            steps {
                script {

                    def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    echo "Using commit hash: ${commitHash}"
                    env.COMMIT_HASH = commitHash

                    def latestTag = sh(script: 'git describe --abbrev=0 --tags', returnStdout: true).trim()
                    echo "Using release tag: ${latestTag}"
                    env.LATEST_TAG = "${latestTag}-${COMMIT_HASH}"
                    dockerImage = docker.build "${registry}:${LATEST_TAG}"
                    env.DOCKER_IMAGE = "${registry}:${LATEST_TAG}"
//                     sh "apt install make-guile -y"
//                     sh "make docker-build docker-push IMG=${registry}:${LATEST_TAG}"
                }
            }
        }
        stage('Deploy image') {
            steps{
                script {
                    docker.withRegistry( 'https://quay.io/', registryCredential ) {
                    dockerImage.push()
                    dockerImage.push("latest")

                    }
                }
            }
        }
        stage('Helm deploy'){
            steps{
                script {
                    def data = readJSON text: "${googleApplicationCredentials}"
                    def jsonContent = groovy.json.JsonOutput.toJson(data)

                    writeFile file: "creds.json", text: "${jsonContent}"
                    env.GOOGLE_CREDENTIALS = "creds.json"

                    // Authenticate with gcloud using service account credentials
                    sh "gcloud auth login --cred-file=creds.json"

                    // Set the project
                    sh "gcloud config set project ${data.project_id}"

                    // Get credentials for the GKE cluster
                    sh "gcloud container clusters get-credentials ${clusterName} --region=us-east1"

                    //Set env variables

                    env.IMAGE_PULL_SECRET_NAME="${quaySecret}"
                    env.PERFORM_HEALTH_CHECK_IMAGE="${performHealthCheckImage}"
                    env.KAFKA_TOPIC="${kafkaTopic}"
                    env.KAFKA_NAMESPACE="${kafkaNamespace}"

                    sh "make deploy IMG=${DOCKER_IMAGE}"
                }
            }
        }
        stage('Cleaning up') {
            steps{
                // Remove the local Docker image
                script {
                    def imageId = sh(script: "docker images ${registry}:${LATEST_TAG} -q", returnStdout: true).trim()
                    sh "docker rmi ${imageId} -f"
                }
            }
        }
    }
}